// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/ports/raft_port.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/Isaac-Franklyn/distributed-task-scheduler/internal/domain/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRaftService is a mock of RaftService interface.
type MockRaftService struct {
	ctrl     *gomock.Controller
	recorder *MockRaftServiceMockRecorder
}

// MockRaftServiceMockRecorder is the mock recorder for MockRaftService.
type MockRaftServiceMockRecorder struct {
	mock *MockRaftService
}

// NewMockRaftService creates a new mock instance.
func NewMockRaftService(ctrl *gomock.Controller) *MockRaftService {
	mock := &MockRaftService{ctrl: ctrl}
	mock.recorder = &MockRaftServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRaftService) EXPECT() *MockRaftServiceMockRecorder {
	return m.recorder
}

// CommitTaskToCluster mocks base method.
func (m *MockRaftService) CommitTaskToCluster(task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTaskToCluster", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTaskToCluster indicates an expected call of CommitTaskToCluster.
func (mr *MockRaftServiceMockRecorder) CommitTaskToCluster(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTaskToCluster", reflect.TypeOf((*MockRaftService)(nil).CommitTaskToCluster), task)
}

// GetLeader mocks base method.
func (m *MockRaftService) GetLeader() (*models.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeader")
	ret0, _ := ret[0].(*models.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeader indicates an expected call of GetLeader.
func (mr *MockRaftServiceMockRecorder) GetLeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeader", reflect.TypeOf((*MockRaftService)(nil).GetLeader))
}

// StartCluster mocks base method.
func (m *MockRaftService) StartCluster(n int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartCluster", n)
}

// StartCluster indicates an expected call of StartCluster.
func (mr *MockRaftServiceMockRecorder) StartCluster(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCluster", reflect.TypeOf((*MockRaftService)(nil).StartCluster), n)
}
